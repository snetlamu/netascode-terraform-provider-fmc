// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-fmc"
	"github.com/netascode/terraform-provider-fmc/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
	"golang.org/x/exp/rand"
)

// End of section. //template:end imports

// Ensure provider defined types fully satisfy framework interfaces
var (
	_ resource.Resource                = &Icmpv4_bulkResource{}
	_ resource.ResourceWithImportState = &Icmpv4_bulkResource{}
)

func NewIcmpv4_bulkResource() resource.Resource {
	return &Icmpv4_bulkResource{}
}

type Icmpv4_bulkResource struct {
	client *fmc.Client
}

func (r *Icmpv4_bulkResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_icmpv4_bulk"
}

func (r *Icmpv4_bulkResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewAttributeDescription("This resource can manage an icmpv4_bulk.").String,

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"domain": schema.StringAttribute{
				MarkdownDescription: "The name of the FMC domain",
				Optional:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"bulk": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("UUID of the ICMPv4 Object").String,
							Computed:            true,
						},
						"name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("The name of the ICMPv4 object (name should be same as parent if overriding)").String,
							Optional:            true,
						},
						"icmp_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP Type Number").String,
							Optional:            true,
						},
						"code": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP Code").String,
							Optional:            true,
						},
						"description": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Description for the ICMPv4 Object").String,
							Optional:            true,
						},
						"overridable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set if ICMPv4 Object is Overridable").String,
							Optional:            true,
						},
						"parent_id": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Id of the rescource").String,
							Optional:            true,
						},
						"parent_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of the resource").String,
							Optional:            true,
						},
						"target_id": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Id of the rescource").String,
							Optional:            true,
						},
						"target_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of the resource [Device/Domain]").String,
							Optional:            true,
						},
						"target_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Name of the resource").String,
							Optional:            true,
						},
					},
				},
			},
		},
	}
}

func (r *Icmpv4_bulkResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*FmcProviderData).Client
}

func (r *Icmpv4_bulkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan Icmpv4_bulk

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !plan.Domain.IsNull() && plan.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(plan.Domain.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.Id.ValueString()))

	// Create object
	body := plan.toBody(ctx, Icmpv4_bulk{})
	res, err := r.client.Post(plan.getPath()+"?bulk=true", body, reqMods...) // Appended path with bulk as true
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (POST), got error: %s, %s", err, res.String()))
		return
	}

	// Setting a random id for the resource
	rand.Seed(uint64(time.Now().UnixNano()))
	charset := "abcdefghijklmnopqrstuvwxyz"
	b := make([]byte, 8)
	for i := range b {
		b[i] = charset[rand.Intn(len(charset))]
	}
	plan.Id = types.StringValue(string(b))

	// Updating the id fields in the bulk array from the response
	for i := 0; i < len(plan.Bulk); i++ {
		plan.Bulk[i].Id = types.StringValue(res.Get("items." + strconv.Itoa(i) + ".id").String())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *Icmpv4_bulkResource) CreateWithoutSettingId(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan Icmpv4_bulk

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !plan.Domain.IsNull() && plan.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(plan.Domain.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.Id.ValueString()))

	// Create object
	body := plan.toBody(ctx, Icmpv4_bulk{})
	res, err := r.client.Post(plan.getPath()+"?bulk=true", body, reqMods...) // Appended path with bulk as true
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (POST), got error: %s, %s", err, res.String()))
		return
	}

	// Updating the id fields in the bulk array from the response
	for i := 0; i < len(plan.Bulk); i++ {
		plan.Bulk[i].Id = types.StringValue(res.Get("items." + strconv.Itoa(i) + ".id").String())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *Icmpv4_bulkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state Icmpv4_bulk

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !state.Domain.IsNull() && state.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(state.Domain.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.String()))

	// Making a GET Request for each item in Bulk
	for i := 0; i < len(state.Bulk); i++ {
		res, err := r.client.Get(state.getPath()+"/"+state.Bulk[i].Id.ValueString(), reqMods...)
		if err != nil && strings.Contains(err.Error(), "StatusCode 404") {
			resp.State.RemoveResource(ctx)
			return
		} else if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object (GET), got error: %s, %s", err, res.String()))
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *Icmpv4_bulkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state Icmpv4_bulk

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !plan.Domain.IsNull() && plan.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(plan.Domain.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	if len(plan.Bulk) != len(state.Bulk) {
		deleteResp := &resource.DeleteResponse{State: resp.State, Private: resp.Private, Diagnostics: resp.Diagnostics}
		r.DeleteAndKeepResource(ctx, resource.DeleteRequest{State: req.State, ProviderMeta: req.ProviderMeta, Private: req.Private}, deleteResp)

		deleteResp.State.Get(ctx, &state)
		diags = resp.State.Set(ctx, &state)

		createResp := &resource.CreateResponse{State: deleteResp.State, Private: deleteResp.Private, Diagnostics: deleteResp.Diagnostics}
		r.CreateWithoutSettingId(ctx, resource.CreateRequest{Config: req.Config, Plan: req.Plan, ProviderMeta: req.ProviderMeta}, createResp)

		tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))
		createResp.State.Get(ctx, &state)
		diags = resp.State.Set(ctx, &state)
	} else {
		// Making a PUT Request for each item in Bulk
		for i := 0; i < len(state.Bulk); i++ {
			body := plan.toBody(ctx, state)
			body = gjson.Get(body, strconv.Itoa(i)).Raw
			body, _ = sjson.SetRaw(body, "id", state.Bulk[i].Id.String())
			res, err := r.client.Put(plan.getPath()+"/"+state.Bulk[i].Id.ValueString(), body, reqMods...)
			if err != nil {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PUT), got error: %s, %s", err, res.String()))
				return
			}
			plan.Bulk[i].Id = state.Bulk[i].Id
		}

		tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

		diags = resp.State.Set(ctx, &plan)
	}
	resp.Diagnostics.Append(diags...)
}

func (r *Icmpv4_bulkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state Icmpv4_bulk

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !state.Domain.IsNull() && state.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(state.Domain.ValueString()))
	}

	// Making a DELETE Request for each item in Bulk
	for i := 0; i < len(state.Bulk); i++ {
		tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Bulk[i].Id.ValueString()))
		res, err := r.client.Delete(state.getPath()+"/"+state.Bulk[i].Id.ValueString(), reqMods...)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (DELETE), got error: %s, %s", err, res.String()))
			return
		}

		tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *Icmpv4_bulkResource) DeleteAndKeepResource(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state Icmpv4_bulk

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set request domain if provided
	reqMods := [](func(*fmc.Req)){}
	if !state.Domain.IsNull() && state.Domain.ValueString() != "" {
		reqMods = append(reqMods, fmc.DomainName(state.Domain.ValueString()))
	}

	// Making a DELETE Request for each item in Bulk
	for i := 0; i < len(state.Bulk); i++ {
		tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Bulk[i].Id.ValueString()))
		res, err := r.client.Delete(state.getPath()+"/"+state.Bulk[i].Id.ValueString(), reqMods...)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (DELETE), got error: %s, %s", err, res.String()))
			return
		}

		tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))
}

// Section below is generated&owned by "gen/generator.go". //template:begin import

func (r *Icmpv4_bulkResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	helpers.SetFlagImporting(ctx, true, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end import
